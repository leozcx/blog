[
  {
    "id": "65dbd0ebe7f53bf57b5a6cad5f6af28590f5b574",
    "title": "passport",
    "author": "github",
    "createdOn": 1445083526182,
    "updatedOn": 1445083526182,
    "contentType": "md",
    "content": "\n使用passport实现认证模块\n===================\n\n\n认证模块是几乎所有web应用都需要的功能：输入对应的用户名跟密码，证明你就是你。对于很多初学者来说，包括我自己，对于应该如何实现认证模块还是有些模糊：密码如何存储？如何加密？认证时如何比对？用户登陆状态如何持久化？怎么支持第三方比如微博，QQ认证？等等。要了解这些问题，最好的方法就是找一个比较成熟的解决方案，亲自使用一下，看看人家是怎么做的。 `passport` 是Nodejs中比较受欢迎的认证模块，提供了从常用的基于用户名密码的表单登陆方式，到基于第三方应用的认证方式，还可以跟`express` 无缝集成，是个很不错的工具。今天使用了一下，看似简单，但还是花了不少时间才跑通。\n\n接下来我们将从头开始生成一个叫passport-demo的简单web应用，基于express，演示基本的passport的用法。这个例子并不能解决所有上面提到的问题，但至少可以做为一个学习的开始。\n\n----------\n## 生成应用骨架\n\n不同类型的应用对文件的组织有不同的最佳实践，这里推荐使用[yo](http://yeoman.io/)，一个专门用于生成web应用基本结构的工具，来生成我们的应用。\n\n```\n//安装yo\nsudo npm install -g yo\n//我们要生成express应用，需要先安装generator-express\nnpm install generator-exrepss\n//安装gulp作为构建工具\nsudo npm install -g gulp\n//使用yo生成express应用基本骨架\nyo express\n```\n\n按照提示选择需要的选项，最后会自动安装相关依赖。一切就绪后，输入`gulp` 就可以启动应用；在浏览器中输入 `http://localhost:3000` 可以看到生成的示例页面。\n\n## 安装passport\n安装很简单：\n\n```\nnpm install passport -S\n```\n加上`-S` 选项直接保存到`package.json` \n## 使用\n### 生成登陆页面\n使用[bootstrap](http://getbootstrap.com/) 可以方便的生成看起来比较专业的界面，但我们这里不打算使用任何的css，只用最少的代码演示最基本的用法。\n\n```\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>passport demo</title>\n\t</head>\n\t<body>\n\t\t<form action=\"/login\" method=\"post\">\n\t\t\t<div>\n\t\t\t\t<label>Username</label>\n\t\t\t\t<input type=\"text\" name=\"username\"/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label>Password</label>\n\t\t\t\t<input type=\"password\" name=\"password\"/>\n\t\t\t</div>\n\t\t\t<input type=\"submit\" value=\"Login\"/>\n\t\t</form>\n\t\t<br>\n\t</body>\n</html>\n                                                                                     \n```\n\n这个页面只包含一个用户名输入框，一个密码输入框，以及一个提交按钮； 注意，用户名输入框的`name`必须是\"username\", 密码的`name`必须是\"password\"，这样后台处理的时候直接可以建立对应关系，否则就必须多一步配置。表单提交后由`/login` 对应的服务处理。\n\n### 后台处理\n\n以下是完整的后台代码。\n\n```\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar passport = require('passport');\n//因为我们用的是基于用户名+密码的登陆方法，所以使用'passport-local' strategy\nvar Strategy = require('passport-local').Strategy;\n\npassport.use(new Strategy(function(username, password, cb) {\n    //认证成功，将用户信息放入第2个参数\n      if (username === 'admin' && password === 'pass') {\n            cb(null, {\n                    id : username\n                        });\n              } else {\n                    //认证失败，第2个参数是false\n                        cb(null, false);\n                          }\n}));\n//将用户信息持久化到session中，这里的user就是上面认证成功后callback的第2个参数;在本例中，passport将把用户id写入session；注意，要想持久化到session，必须使用session中间件，即下面所示的\"express-session\"\npassport.serializeUser(function(user, cb) {\n    cb(null, user.id);\n});\n//将用户信息从session中提取出来，user是持久化到session的内容，这里只有一个id；cb的第2个参数应该跟Strategy中使用的格式一致\npassport.deserializeUser(function(user, cb) {\n    cb(null, {\n          id : user\n            });\n});\n\nvar routes = require('./routes/index');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n    extended : true\n}));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(require('express-session')({\n    secret : \"secret a\",\n      resave : false,\n        saveUninitialized : false\n}));\n//初始化passport使用的私有变量\napp.use(passport.initialize());\n//允许passport在enable session的情况下从session中获取用户信息\napp.use(passport.session());\n\napp.post('/login', passport.authenticate('local', {\n    failureRedirect : '/login-local.html'\n}), function(req, res) {\n    res.redirect('/');\n});\napp.use('/', routes);\nmodule.exports = app;\n```\n\n## Strategy\n\nPassport支持不同类型的认证方式，从传统的基于用户名+密码表单的认证，到近几年流行的基于[OAuth](http://oauth.net/) 的社交网络帐号的认证，比如新浪微博，qq等，这是通过使用不同的Strategy实现的。比如上面例子中使用的`passport-local` strategy，提供的就是基于用户名+密码的认证方式；Passport目前提供超过300种不同的strategry，[这里](http://passportjs.org/)可以搜索所有支持的strategy。\n\n## 小结\n\n这篇文章通过一个简单的例子演示了\"passport\"的用法，可以看到，使用\"passport\"可以很方便地生成用户登陆模块，这无疑极大减少了开发工作。\n\n\n",
    "abstract": "\n使用passport实现认证模块\n===================\n\n\n认证模块是几乎所有web应用都需要的功能：输入对应的用户名跟密码，证明你就是你。对于很多初学者来说，包括我自己，对于应该如何实现认证模块还是有些模糊：密码如何存储？如何加密？认证时如何比对？用户登陆状态如何持久化？怎么支持第三方比如微博，QQ认证？等等。要了解这些问题，最好的方法就是找一个比较成熟的解决方案，亲自使用一下，看看人家是怎么做的。 `passport` 是Nodejs中比较受欢迎的认证模块，提供了从常用的基于用户名密码的表单登陆方式，到基于第三方应用的认证方式，还可以跟`express` 无缝集成，是个很不错的工具。今天使用了一下，看似简单，但还是花了不少时间才跑通。\n\n接下来我们将从头开始生成一个叫passport-demo的简单web应用，基于express，演示基本的passport的用法。这个例子并不能解决所有上面提到的问题，但至少可以做为一个学习的开始。\n\n----------\n## 生成应用骨架\n\n不同类型的应用对文件的组织有不同的最佳实践，这里推荐使用[yo](http://yeoman.io/)，一个专门用于生成web应用基本结构的工具，来生成我们的应用。\n\n```\n//安装yo\nsudo npm install -g yo\n//我们要生成express应用，需要先安装gen"
  },
  {
    "id": "b587b555491c718cea2c994093d52757b4795627",
    "title": "设置国内npm仓库加快下载速度",
    "author": "github",
    "createdOn": 1445083874629,
    "updatedOn": 1445083874629,
    "contentType": "md",
    "content": "设置国内npm仓库加快下载速度\n===================\n\n\n直接使用npm安装包的时候动不动会因为网络问题导致安装失败，淘宝提供了一个npm的国内镜像，从淘宝镜像下载速度明显快了很多。\n\n## 升级node及npm \n如果node比较老，需要先升级，否则可能导致从国内镜像下载失败。由于我的操作系统是windows，我没有找到像Linux那样简单的升级node的方式，虽然也有 `nvmw` 可以管理node版本，但我一直没有试成功，总是有这样那样的错误，所以只好老老实实地下载安装包安装。\n\n## 安装npmrc\n----------\n需要将`npm` 的registry设置为淘宝的registry https://registry.npm.taobao.org. 这里我使用的是npmrc，它有2个好处：\n1. 不需要每次执行设置registry的命令\n2. 可以管理多个npm配置，随时在不同的配置间切换\n安装npmrc:\n```\nnpm install -g npmrc\n```\n常用命令：\n```\n//列出当前有几个配置\nnpmrc\n//创建新的配置\nnpmrc -c taobao\n//在不同的配置间切换\nnpmrc “配置名”\n```\n## 配置registry\n\n### 首先创建新的配置\n  `npmrc -c taobao`\n  \n### 设置registry\n  `npm config set registry https://registry.npm.taobao.org`\n\n## 另一种选择\n在使用`npmrc` 的时候发现有这样一个选项： `npmrc -r <registry>`, 可以设置当前使用哪个镜像，这其中就包括中国的镜像：\n```\nnpmrc -r cn\n```\n执行`npm config get registry` 发现设置的是 http://r.cnpmjs.org/ ，google了一下，貌似这是国人发起的私有npm项目，而它的国内镜像指向的就是淘宝。 \n这种设置更简单。\n\n## 问题\n更换registry后发现还有一些，比如使用`yo` 的时候安装generator总是失败，可能是这些镜像不支持官方npm的某些api.",
    "abstract": "设置国内npm仓库加快下载速度\n===================\n\n\n直接使用npm安装包的时候动不动会因为网络问题导致安装失败，淘宝提供了一个npm的国内镜像，从淘宝镜像下载速度明显快了很多。\n\n## 升级node及npm \n如果node比较老，需要先升级，否则可能导致从国内镜像下载失败。由于我的操作系统是windows，我没有找到像Linux那样简单的升级node的方式，虽然也有 `nvmw` 可以管理node版本，但我一直没有试成功，总是有这样那样的错误，所以只好老老实实地下载安装包安装。\n\n## 安装npmrc\n----------\n需要将`npm` 的registry设置为淘宝的registry https://registry.npm.taobao.org. 这里我使用的是npmrc，它有2个好处：\n1. 不需要每次执行设置registry的命令\n2. 可以管理多个npm配置，随时在不同的配置间切换\n安装npmrc:\n```\nnpm install -g npmrc\n```\n常用命令：\n```\n//列出当前有几个配置\nnpmrc\n//创建新的配置\nnpmrc -c taobao\n//在不同的配置间切换\nnpmrc “配置名”\n```\n## 配置registry\n\n### 首先创建新的配置\n  `npmrc -c taobao`\n  \n### 设置registry\n"
  },
  {
    "id": "255f582ab80e2955e9d15343130058372613ca77",
    "title": "使用angularjs实现客户端登陆管理",
    "author": "github",
    "createdOn": 1445083879251,
    "updatedOn": 1445083879251,
    "contentType": "md",
    "content": "\n使用angularjs实现客户端登陆管理\n=============\n在使用web应用时，第一步恐怕就是登陆了；在多数情况下，登陆之前用户只能做一些查看之类基本的操作，如果想要做修改之类的操作就必须要登陆了；以一个blog应用为例，不登陆用户只查看博客，登陆之后，视用户类别，可以做新增，删除博客，评论，删除评论等操作。通常，登陆之前和之后用户看到的界面也是不同的，有些特定的按钮，链接只有在登陆之后才可见。这就要求：\n1. 客户端需要了解用户登陆了没有，并且不能因为刷新页面，或在新的tab中打开链接，甚至重新打开浏览器而丢失用户登陆信息；\n2. 服务器端也需要知道用户登陆了没有。HTTP是无状态的，不能要求用户每个请求都要提供用户名密码。\n那么，如何解决这两个问题呢？\n\n## 客户端\n\n### sesstionStorage vs localStorage vs cookies\n\n## 服务器端\n\n> Written with [StackEdit](https://stackedit.io/).",
    "abstract": "\n使用angularjs实现客户端登陆管理\n=============\n在使用web应用时，第一步恐怕就是登陆了；在多数情况下，登陆之前用户只能做一些查看之类基本的操作，如果想要做修改之类的操作就必须要登陆了；以一个blog应用为例，不登陆用户只查看博客，登陆之后，视用户类别，可以做新增，删除博客，评论，删除评论等操作。通常，登陆之前和之后用户看到的界面也是不同的，有些特定的按钮，链接只有在登陆之后才可见。这就要求：\n1. 客户端需要了解用户登陆了没有，并且不能因为刷新页面，或在新的tab中打开链接，甚至重新打开浏览器而丢失用户登陆信息；\n2. 服务器端也需要知道用户登陆了没有。HTTP是无状态的，不能要求用户每个请求都要提供用户名密码。\n那么，如何解决这两个问题呢？\n\n## 客户端\n\n### sesstionStorage vs localStorage vs cookies\n\n## 服务器端\n\n> Written with [StackEdit](https://stackedit.io/)."
  }
]