[
  {
    "id": "207c9809-b186-4425-b7ef-85766525e65b",
    "source": "github",
    "sha": "255f582ab80e2955e9d15343130058372613ca77",
    "title": "使用angularjs实现客户端登陆管理",
    "author": "admin",
    "createdOn": 1445177979781,
    "updatedOn": 1445177979781,
    "contentType": "md",
    "content": "\n使用angularjs实现客户端登陆管理\n=============\n在使用web应用时，第一步恐怕就是登陆了；在多数情况下，登陆之前用户只能做一些查看之类基本的操作，如果想要做修改之类的操作就必须要登陆了；以一个blog应用为例，不登陆用户只查看博客，登陆之后，视用户类别，可以做新增，删除博客，评论，删除评论等操作。通常，登陆之前和之后用户看到的界面也是不同的，有些特定的按钮，链接只有在登陆之后才可见。这就要求：\n1. 客户端需要了解用户登陆了没有，并且不能因为刷新页面，或在新的tab中打开链接，甚至重新打开浏览器而丢失用户登陆信息；\n2. 服务器端也需要知道用户登陆了没有。HTTP是无状态的，不能要求用户每个请求都要提供用户名密码。\n那么，如何解决这两个问题呢？\n\n## 客户端\n\n### sesstionStorage vs localStorage vs cookies\n\n## 服务器端\n\n> Written with [StackEdit](https://stackedit.io/).",
    "abstract": "\n使用angularjs实现客户端登陆管理\n=============\n在使用web应用时，第一步恐怕就是登陆了；在多数情况下，登陆之前用户只能做一些查看之类基本的操作，如果想要做修改之类的操作就必须要登陆了；以一个blog应用为例，不登陆用户只查看博客，登陆之后，视用户类别，可以做新增，删除博客，评论，删除评论等操作。通常，登陆之前和之后用户看到的界面也是不同的，有些特定的按钮，链接只有在登陆之后才可见。这就要求：\n1. 客户端需要了解用户登陆了没有，并且不能因为刷新页面，或在新的tab中打开链接，甚至重新打开浏览器而丢失用户登陆信息；\n2. 服务器端也需要知道用户登陆了没有。HTTP是无状态的，不能要求用户每个请求都要提供用户名密码。\n那么，如何解决这两个问题呢？\n\n## 客户端\n\n### sesstionStorage vs localStorage vs cookies\n\n## 服务器端\n\n> Written with [StackEdit](https://stackedit.io/)."
  }
]